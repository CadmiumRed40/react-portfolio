[{"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/index.js":"1","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/App.js":"2","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/reportWebVitals.js":"3","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Skillbox/Skillbox.js":"4","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Contact/Contact.js":"5","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Welcomebox/Welcomebox.js":"6","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Projects/Projects.js":"7","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Navbar/Navbar.js":"8"},{"size":535,"mtime":1677809001837,"results":"9","hashOfConfig":"10"},{"size":481,"mtime":1680037965561,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1677809001838,"results":"12","hashOfConfig":"10"},{"size":2699,"mtime":1678900211704,"results":"13","hashOfConfig":"10"},{"size":1971,"mtime":1680642762899,"results":"14","hashOfConfig":"10"},{"size":644,"mtime":1680037353140,"results":"15","hashOfConfig":"10"},{"size":11834,"mtime":1680037107564,"results":"16","hashOfConfig":"10"},{"size":481,"mtime":1679338791807,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"128f2sj",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"21"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"21"},"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/index.js",[],[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/App.js",[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/reportWebVitals.js",[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Skillbox/Skillbox.js",[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Contact/Contact.js",[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Welcomebox/Welcomebox.js",[],[],"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Projects/Projects.js",["45","46"],[],"import React, { useState, useEffect } from 'react'\nimport Popup from 'reactjs-popup'\n//import 'reactjs-popup/dist/index.css';\nimport '../Projects/Projects.css'\n//import Modal from 'react'\nimport '../Projects/placeholder.jpg' \n\n\nexport default function Projects() {\n\n    var placeHolderIcon = require('../Projects/placeholder.jpg')\n\n    const projects = [\n        {\n            name: \"PlaceHolder\",\n            icon: placeHolderIcon,\n            description: \"Placeholder\",\n            expanded:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Donec massa sapien faucibus et molestie. Suspendisse faucibus interdum posuere lorem ipsum dolor sit amet.\"\n        }\n   ];\n    \n   /*const [projects, setProjects] = useState(\"\");\n   \n   useEffect(() => {\n    try {\n    fetch('http://localhost:8000/project')\n    .then((res) => res.json())\n    .then((data) => setProject(data.project));\n    }catch(error){\n        console.error('error')\n    }\n   },[]);*/\n\n    return (\n    <div>\n        <div className='projects-container-main'>\n            <div className='project-header'>\n                <h2>Projects</h2>\n            </div>\n\n            <div className='tabs-button-container'>\n                <div className='tabs-buttons'>\n                    <button className='programming-projects-tab col1'>\n                        <span>Projects</span>\n                    </button>\n                    <button className='design-projects col1 '>\n                        <span>Design</span>\n                    </button>\n                </div>\n            </div>\n\n            <div className='project-table-container'>\n                {projects.map ((project,index) => ( \n                <table>\n                    \n                    <tr className='row1'>\n                        <td className='project-cell'>\n                            <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n\n                        <td className='project-cell'>\n                        <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n                    </tr>\n\n                    <tr className='row2'>\n                        <td className='project-cell'>\n                        <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n\n                        <td className='project-cell'>\n                        <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n                    </tr>\n\n                    <tr className='row3'>\n                        <td className='project-cell'>\n                        <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n\n                        <td className='project-cell'>\n                            <h3>{project.name}</h3>\n                                <Popup className='popup'\n                                    trigger= {\n                                    <button>\n                                        <img src={project.icon} alt='p-icon' className='project-icon'></img>\n                                    </button>\n                                        } modal nested>\n                                        {\n                                        close => (\n                                    <div className='modal'>\n\n                                        <div className='modal-content'>\n                                            <h4>{project.name}</h4>\n                                            <img src={project.icon} alt='p-icon-modal' className='project-icon-modal'></img>\n                                            <p>{project.expanded}</p>\n                                        </div>\n\n                                        <div>\n                                            <button className='modal-close-button' onClick=\n                                                {() => close()}>\n                                                    Close\n                                            </button>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                                </Popup>\n                        <p className='project-desc'>{project.description}</p>\n                        </td>\n                    </tr> \n                   \n                    \n                </table>\n                 ))};\n            </div>\n\n        </div>\n    </div>\n  )\n}\n","/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Navbar/Navbar.js",["47","48","49","50","51","52"],[],"import React from 'react'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport \"../Navbar/Navbar.css\"\n\nexport default function Navbar() {\n  return (\n    <div>\n      <nav className='nav-bar'>\n        <ul>\n          <li><a href=\"#\">About me</a></li>\n          <li><a href=\"#\">Skills</a></li>\n          <li><a href=\"#\">Projects</a></li>\n          <li><a href=\"#\">Contact Me</a></li>\n          <li><a href=\"#\">More Info</a></li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n",{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":1,"column":27,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"58","line":2,"column":22,"nodeType":"55","messageId":"56","endLine":2,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":10,"column":15,"nodeType":"61","endLine":10,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":11,"column":15,"nodeType":"61","endLine":11,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":12,"column":15,"nodeType":"61","endLine":12,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":13,"column":15,"nodeType":"61","endLine":13,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":14,"column":15,"nodeType":"61","endLine":14,"endColumn":27},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]