{"ast":null,"code":"var _jsxFileName = \"/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Contact/Contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Contact.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ContactForm() {\n  _s();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSent, setIsSent] = useState(false); //\n\n  //handles the submitting portion of the component. We create a post request of the object specified to the localhost address\n  const handleSubmit = e => {\n    e.preventDefault();\n    axios.post('http://localhost:3001/send-email', {\n      name,\n      email,\n      message\n    }).then(res => {\n      console.log(res.data);\n      setName('');\n      setEmail('');\n      setMessage('');\n      setIsSent(true);\n      localStorage.setItem('name', name);\n      localStorage.setItem('email', email);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  //displaying the object from localstorage back when the component mounts using useEffect and no dependency array to only run on the initial render.\n\n  useEffect(() => {\n    const storedName = localStorage.getItem('name');\n    const storedEmail = localStorage.getItem('email');\n    if (storedName && storedEmail) {\n      setName(storedName);\n      setEmail(storedEmail);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact-main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-headers email-row1\",\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-headers email-row1\",\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-headers email-row2\",\n          children: [\"Message:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"email-submit-button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this), isSent && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"email-confirmation\",\n          children: \"Message sent successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(ContactForm, \"k7mq1Qjbt4N3lkXMKtXoWL+U4Yo=\");\n_c = ContactForm;\n;\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ContactForm","_s","name","setName","email","setEmail","message","setMessage","isSent","setIsSent","handleSubmit","e","preventDefault","post","then","res","console","log","data","localStorage","setItem","catch","err","error","storedName","getItem","storedEmail","className","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bluecobalt/Documents/Coding/REACTAPPS/react-portfolio-website/client/src/components/Contact/Contact.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Contact.css'\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSent, setIsSent] = useState(false); //\n\n//handles the submitting portion of the component. We create a post request of the object specified to the localhost address\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios.post('http://localhost:3001/send-email', { name, email, message })\n      .then((res) => {\n        console.log(res.data);\n        setName('');\n        setEmail('');\n        setMessage('');\n        setIsSent(true);\n        localStorage.setItem('name', name);\n        localStorage.setItem('email', email)\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  //displaying the object from localstorage back when the component mounts using useEffect and no dependency array to only run on the initial render.\n\n  useEffect(() => {\n    const storedName = localStorage.getItem('name');\n    const storedEmail = localStorage.getItem('email');\n\n    if (storedName && storedEmail) {\n      setName(storedName);\n      setEmail(storedEmail);\n    }\n  },[]);\n\n  return (\n    <div className='contact-main-container'>\n      <div className='contact-form-container'>\n    <form onSubmit={handleSubmit}>\n      <label className='form-headers email-row1'>\n        Name:\n        <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      </label>\n      <label className='form-headers email-row1'>\n        Email:\n        <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      </label>\n      <label className='form-headers email-row2'>\n        Message:\n        <textarea value={message} onChange={(e) => setMessage(e.target.value)} />\n      </label>\n      <button type=\"submit\" className='email-submit-button'>Submit</button>\n      {isSent && <p className='email-confirmation'>Message sent successfully!</p>}\n    </form>\n    </div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}